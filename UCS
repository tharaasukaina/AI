graph={
"S":[("A",2),("B",3),("D",5)],
"A":[("C",4)],
"B":[("D",4)],
"C":[("G",2),("D",1)],
"D":[("G",5)]
 } 
def path_cost(path):
 total_cost=0
 for(node,cost)in path :
    total_cost+=cost
 return total_cost, path[-1][0]    
def ucs(graph,start,goal):
  visited=[]
  queue=[[(start,0)]] 
  while queue : 
   queue.sort(key=path_cost)  
   path=queue.pop(0)
   node=path[-1][0]
   if node in visited:
     continue
   visited.append(node)

   if node==goal:
     return path
   else :
     adjacent_node=graph.get(node,[])
     for (node2,cost) in adjacent_node :
       new_path=path.copy()
       new_path.append((node2,cost))
       queue.append(new_path)

sol=ucs(graph,"S","G")
print("sol is ",sol)
print("scost is = ",path_cost(sol))


  
